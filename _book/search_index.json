[
["databases.html", "Chapter 6 Databases 6.1 What is SQL? 6.2 SQLite: An Exercise 6.3 SQL and R 6.4 Non-Relational Databases (noSQL) 6.5 References 6.6 NoSQL: MongoDB", " Chapter 6 Databases 6.1 What is SQL? SQL (Structured Query Language) is a standard way of specifying the information you want to receive from a database. There are a number of variations on the language, and a number of online resources available for learning their various complexities. However, the general structure of all SQL queries is consistent across implementations. SQL is an imperative computer language. This means that it describes the output desired without actually describing the calculations required to get the output described. This allows for the verbs and structures of the language to be used across database systems, as well as in other areas of data handling. 6.1.1 What is a database? A database is simply an organized structure for storing and accessing data on disk. There are a number of structures used to store data on disk, each with their own languages. However, despite the variations in structure, the goals (and song) remain the same. The process of data storage on disk is controlled by the database management system (DBMS). 6.1.2 Relational Databases (SQL) The most common type of DBMS is a relational database (RDBMS). A Relational Database stores information in a the form of entities and the relationships between them. Entities are typically nouns and relationships are typically verbs. For example, if we wanted to store information about class enrollment at a university, the entities would consist of objects like a student, class, and professor. The relationships would consist of takes and teaches. Relationships can be one to one, many to many, or one to many. 6.1.3 Types of Relational Databases Commercial Oracle Database Microsoft SQL Server … Open-source MySQL PostgreSQL SQLite … SQLite is the easiest way to start: unlike the others, it’s not a client-server DB. The whole DB can live in a (portable) folder. All the required tools are included in dplyr. 6.1.4 SQL In relational databases, entities and relationships are represented by tables, where each row or record in a table represents a particular instance of of that general object. Continuing the class example, students would be stored in Student, classes in Class, and professors in Professor. The table containing the relationships between students and classes would be likely named StudentClass and the The three key parts of a SQL query are the SELECT clause, the FROM clause, and the WHERE clause. The SELECT clause specifies the pieces of information you want about an individual record, the FROM clause specifies the tables that will be used To get all information about all students we would type the following: SELECT * FROM STUDENT To Select the name and birthday of all students in classes taught by Dr. Choirat would be a more complex query, which would likely look something like this: SELECT Name, DOB FROM Student s inner join StudentClass sc on s.ID = sc.studentid inner join ProfessorClass pc on sc.classid = pc.classid inner join Professor p on pc.profid = p.id WHERE p.lastname = &quot;Choirat&quot; 6.2 SQLite: An Exercise Create an in memory DB sqlite3 6.2.1 Make a Table CREATE TABLE table1(x,y,z); 6.2.2 Insert Values INSERT INTO table1 VALUES (1,2,3),(4,5,6),(7,8,9); 6.2.3 Select Values Select All Values SELECT * FROM table1; Select specific values SELECT z from table1 WHERE x = 4; 6.3 SQL and R There are a number of R packages for interfacing directly with RDBs. RODBC is one sucn example that allows for queries to be submitted to previsously set up database connections with the results being returned as a data frame for further analysis in R. There’s a large amount of documentation available online for these methods. Each system has its own idiosyncracies. 6.3.1 Data: oscars and movies again: 2016 Oscars Nominations library(readr) library(dplyr) db &lt;- src_sqlite(&quot;db.sqlite3&quot;, create = TRUE) oscars &lt;-&quot; name,movie,category Adam McKay,The Big Short,Best Director Alejandro González Iñárritu,The Revenant,Best Director Lenny Abrahamson,Room,Best Director Tom McCarthy,Spotlight,Best Director George Miller,Mad Max: Fury Road,Best Director Bryan Cranston,Trumbo,Best Actor Matt Damon,The Martian,Best Actor Michael Fassbender,Steve Jobs,Best Actor Leonardo DiCaprio,The Revenant,Best Actor Eddie Redmayne,The Danish Girl,Best Actor Cate Blanchett,Carol,Best Actress Brie Larson,Room,Best Actress Jennifer Lawrence,Joy,Best Actress Charlotte Rampling,45 Years,Best Actress Saoirse Ronan,Brooklyn,Best Actress &quot; oscars &lt;- read_csv(oscars, trim_ws = TRUE, skip = 1) movies &lt;-&quot; movie,length_mins The Big Short,130 Star Wars: The Force Awakens,135 Brooklyn,111 Mad Max: Fury Road,120 Room,118 The Martian,144 The Revenant,156 Spotlight,128 &quot; movies &lt;- read_csv(movies, trim_ws = TRUE, skip = 1) oscars_table &lt;- copy_to(db, oscars) movies_table &lt;- copy_to(db, movies) db 6.4 Non-Relational Databases (noSQL) 6.4.1 Drawbacks of Relational Databases Looking up all information about one entity can be expensive Require a large amount of overhead Difficult to distribute across multiple disks Considered to by some to be inflexible 6.4.2 Common Types of NoSQL Databases Graph Databases Neo4j OrientDB Document Databases MongoDB JSON Databases XML Databases 6.5 References The Oscar movie example comes from this lecture by Rafa Irizarry: https://github.com/datasciencelabs/2016/blob/master/lectures/wrangling/data-wrangling-with-dplyr.Rmd 6.6 NoSQL: MongoDB 6.6.1 JSON format JSON: JavaScript Object Notation. Readings: http://www.json.org/ http://json.org/example.html library(jsonlite) l &lt;- fromJSON( &#39;{ &quot;glossary&quot;: { &quot;title&quot;: &quot;example glossary&quot;, &quot;GlossDiv&quot;: { &quot;title&quot;: &quot;S&quot;, &quot;GlossList&quot;: { &quot;GlossEntry&quot;: { &quot;ID&quot;: &quot;SGML&quot;, &quot;SortAs&quot;: &quot;SGML&quot;, &quot;GlossTerm&quot;: &quot;Standard Generalized Markup Language&quot;, &quot;Acronym&quot;: &quot;SGML&quot;, &quot;Abbrev&quot;: &quot;ISO 8879:1986&quot;, &quot;GlossDef&quot;: { &quot;para&quot;: &quot;A meta-markup language, used to create markup languages such as DocBook.&quot;, &quot;GlossSeeAlso&quot;: [&quot;GML&quot;, &quot;XML&quot;] }, &quot;GlossSee&quot;: &quot;markup&quot; } } } } }&#39; ) l$glossary$title ## [1] &quot;example glossary&quot; l$glossary$GlossDiv$GlossList$GlossEntry$GlossDef ## $para ## [1] &quot;A meta-markup language, used to create markup languages such as DocBook.&quot; ## ## $GlossSeeAlso ## [1] &quot;GML&quot; &quot;XML&quot; l &lt;- fromJSON(&quot;src/example.json&quot;) 6.6.2 MongoDB Reading: https://docs.mongodb.com/manual/administration/install-community/ With homebrew on OS X: brew update brew install mongodb brew tap homebrew/services # once brew services start mongodb "]
]
