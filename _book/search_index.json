[
["intro.html", "Computing for Big Data (BST-262) Chapter 1 Introduction 1.1 Logistics 1.2 Prerequisites 1.3 Rationale 1.4 Big data bottlenecks 1.5 Syllabus 1.6 Evaluation 1.7 Software tools and packages 1.8 Datasets 1.9 Contributing with GitHub 1.10 Before we start… 1.11 Style", " Computing for Big Data (BST-262) Christine Choirat 2017-11-01 Chapter 1 Introduction 1.1 Logistics Fall 2 course Tuesday and Thursday, 11:30am-1pm Contact info: Christine Choirat (cchoirat@iq.harvard.edu). Please use BST232 in the email title. TA’s: Qian Di (qiandi@mail.harvard.edu) and Ben Sabath (mbsabath@hsph.harvard.edu) Office hours: Ben: Tuesday 1:30-2:30pm Qian: Thursday 10:30-11:30am Christine: Tuesday 10:30-11:30am (office 437A) Course GitHub repository https://github.com/cchoirat/bigdata17 Open file in folder _book/index.html These course notes are work in progress. 1.2 Prerequisites For BST262 (Computing for Big Data), we assume familiarity with the material covered in BST260 (Introduction to Data Science). We will use R to present concepts that are mostly language-agnostic. We could have used Python, as in BST261 (Data Science II). 1.3 Rationale Available data grows at a much faster rate than available computing capacity. Statistical software programs such as R were not designed to handle datasets of massive size. 1.4 Big data bottlenecks As described by Lim and Tjhi (2015), there are three bottlenecks: CPU RAM I/O Figure 1.1: Steps to execute an R program, from Lim and Tjhi (2015), Chapter 1. Exercise 1.1 Can you identify points 1–7 in the following code snippet? data &lt;- read.csv(&quot;mydata.csv&quot;) totals &lt;- colSums(data) write.csv(totals, &quot;totals.csv&quot;) 1.5 Syllabus Part I – Good code still matters (even with lots of computing resources) Week 1 - Basic tools Lecture 1. Unix scripting, make Lecture 2. Version control: Git and GitHub (guest lecture: Ista Zhan) Week 2 - Creating and maintaining R packages Lecture 3. Rationale, package structure, available tools Lecture 4. Basics of software engineering: unit testing, code coverage, continuous integration Week 3 - Software optimization Lecture 5. Measuring performance: profiling and benchmarking tools Lecture 6. Improving performance: an introduction to C/C++, Rcpp Part II – Scaling up (don’t use big data tools for small data) Week 4 – Databases Lecture 7. Overview of SQL (SQLite, PostgreSQL) and noSQL databases (HBase, MongoDB, Cassandra, BigTable, …) Lecture 8. R database interfaces (in particular through dplyr and mongolite) Week 5 - Analyzing data that does not fit in memory Lecture 9. Pure R solutions (sampling, ff and bigmemory, other interpreters). JVM solutions (h20, Spark) Lecture 10. An introduction to parallel computing; clusters and cloud computing. “Divide and Conquer” (MapReduce approaches) Week 6 – Visualization Lecture 11. Principles of visualization (guest lecture: James Honaker) Lecture 12. Maps and GIS: principles of GIS, using R as a GIS, PostGIS Weeks 7 &amp; 8 - Guest lectures (order and precise schedule TBD) Software project management (Danny Brooke) R and Spark (Ellen Kraffmiller and Robert Treacy) Advanced GIS and remote sensing (TBD) Cluster architecture (William J. Horka) 1.6 Evaluation Grades will be based on two mandatory problem sets. Each problem set will correspond to 50% (= 50 points) of the final grade. The first problem set will be available by the end of week 3 and the second problem set by the end of week 6. You will be required to submit problem set solutions within two weeks. Grades, and feedback when appropriate, will be returned two weeks after submission. You will submit a markdown document that combines commented code for data analysis and detailed and structured explanations of the algorithms and software tools that you used. 1.7 Software tools and packages We will mostly use R in this course. Some examples will be run in Python. In general, we will use free and open-source software programs such as PostgreSQL / PostGIS or Spark. 1.8 Datasets We have collected datasets to illustrate concepts. They are hosted on a Dropbox folder. 1.8.1 MovieLens MovieLens by Harper and Konstan (2015, https://grouplens.org/datasets/movielens/) collects datasets from the website https://movielens.org/. There are datasets of different sizes. We will use: Small (1MB): https://grouplens.org/datasets/movielens/latest/ Benchmark (~190MB zipped): https://grouplens.org/datasets/movielens/20m/ 1.8.2 Airlines data The airlines dataset comes from the U.S. Department of Transportation and were used in the 2009 Data Expo of the American Statistical Association (ASA). We will use a version curated by h2o: https://github.com/h2oai/h2o-2/wiki/Hacking-Airline-DataSet-with-H2O. 1.8.3 Insurance claims Claims data contain Protected Health Information (PHI). There are strong privacy restrictions to store, use and share this type of data. We will use synthetic data (Sample 1) from the Centers for Medicare and Medicaid Services (CMS). 1.8.4 Census Census data is commonly merged with administrative claims data such as Medicare. We will use data from the Census Bureau. 1.8.5 PM2.5 exposure We will use PM2.5 exposure data from the EPA Air Quality System (AQS) to illustrate GIS linkage concepts. 1.8.6 Methylation If there is enough interest, we might present methylation examples. 1.9 Contributing with GitHub If you have suggestions, you can open a GitHub issue at https://github.com/cchoirat/bigdata17/issues. If you want to contribute, we welcome pull requests. 1.10 Before we start… How much R do you know? Introduction to R: http://tutorials.iq.harvard.edu/R/Rintro/Rintro.html Regression models in R: http://tutorials.iq.harvard.edu/R/Rstatistics/Rstatistics.html R graphics: http://tutorials.iq.harvard.edu/R/Rgraphics/Rgraphics.html R programming: http://tutorials.iq.harvard.edu/R/RProgramming/Rprogramming.html 1.11 Style Reading: http://adv-r.had.co.nz/Style.html References "],
["basics.html", "Chapter 2 Basic tools 2.1 Command line tools 2.2 Makefiles 2.3 Git and GitHub", " Chapter 2 Basic tools In this Chapter, we present basic tools that will be important when interacting with big data systems: the command-line interface (CLI) in a Unix shell and several utilities (less, awk, vi and make). 2.1 Command line tools We assume some familiarity with the Unix shell, for example as in http://swcarpentry.github.io/shell-novice/. We also assume that you have access to a shell, either because you use Linux or OS X or because you have the right tools on Windows (for example Cygwin or the Bash shell in Windows 10). 2.1.1 Why use the command line? Batch processing Cluster and cloud computing 2.1.2 Basic Unix tools 2.1.3 Useful tools 2.1.3.1 less less is a pager that lets you view one page at a time files that can be very large. File DE1_0_2008_to_2010_Carrier_Claims_Sample_1A.csv in Data17/SyntheticMedicare is 1.2GB. Even if we have enough RAM to process the data, less helps get a very quick sense of the data (variable names, separators, etc.) 2.1.3.2 awk awk is a text-processing programming language available on most Unix systems. It can be used for data extraction. 2.1.3.3 vi vi is a screen-based text editor available on almost all Unix systems. Most versions are actually Vim (that stands for “Vi IMproved”). There are many cheat sheets and tutorials available on-line (for example, the interactive http://www.openvim.com/). I invite you to learn basics vi commands. 2.1.4 Example Let’s apply some of the techniques described in Blackwell and Sen (2012) on Fisher’s Iris data set saved in tab-delimited format. Of course, it is a small dataset easily processed with R: iris &lt;- read.table(&quot;~/Dropbox/Data17/iris/iris.tab&quot;) head(iris, n = 5) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa In a shell, we can use: head -n 6 ~/Dropbox/Data17/iris/iris.tab ## &quot;Sepal.Length&quot; &quot;Sepal.Width&quot; &quot;Petal.Length&quot; &quot;Petal.Width&quot; &quot;Species&quot; ## &quot;1&quot; 5.1 3.5 1.4 0.2 &quot;setosa&quot; ## &quot;2&quot; 4.9 3 1.4 0.2 &quot;setosa&quot; ## &quot;3&quot; 4.7 3.2 1.3 0.2 &quot;setosa&quot; ## &quot;4&quot; 4.6 3.1 1.5 0.2 &quot;setosa&quot; ## &quot;5&quot; 5 3.6 1.4 0.2 &quot;setosa&quot; Suppose we only need to select two variables in our model, Sepal.Length and Species. In R, we can use: iris_subset &lt;- iris[, c(&quot;Sepal.Length&quot;, &quot;Species&quot;)] or iris_subset &lt;- iris[, c(1, 5)] head(iris_subset) ## Sepal.Length Species ## 1 5.1 setosa ## 2 4.9 setosa ## 3 4.7 setosa ## 4 4.6 setosa ## 5 5.0 setosa ## 6 5.4 setosa With the tidyverse, we can use pipes. The %&gt;% operator allows for performing chained operations. suppressMessages(library(dplyr)) iris %&gt;% select(1, 5) %&gt;% head() ## Sepal.Length Species ## 1 5.1 setosa ## 2 4.9 setosa ## 3 4.7 setosa ## 4 4.6 setosa ## 5 5.0 setosa ## 6 5.4 setosa In a shell, the pipe operator to combine shell commands is | and we can use: cut -f 1,5 ~/Dropbox/Data17/iris/iris.tab | head -n 7 ## &quot;Sepal.Length&quot; &quot;Species&quot; ## &quot;1&quot; 0.2 ## &quot;2&quot; 0.2 ## &quot;3&quot; 0.2 ## &quot;4&quot; 0.2 ## &quot;5&quot; 0.2 ## &quot;6&quot; 0.4 To keep observations with “Sepal.Length” greater than 5: iris %&gt;% filter(Sepal.Length &gt; 5) %&gt;% head() ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 5.4 3.9 1.7 0.4 setosa ## 3 5.4 3.7 1.5 0.2 setosa ## 4 5.8 4.0 1.2 0.2 setosa ## 5 5.7 4.4 1.5 0.4 setosa ## 6 5.4 3.9 1.3 0.4 setosa In the shell, we can use the AWK programming language. We start from row NR 2 (we could start from row 1, it contains variable names) and select rows such that the second variable (Sepal.Length) is greater than 5. awk &#39;NR == 2 || $2 &gt; 5&#39; ~/Dropbox/Data17/iris/iris.tab | head ## &quot;1&quot; 5.1 3.5 1.4 0.2 &quot;setosa&quot; ## &quot;6&quot; 5.4 3.9 1.7 0.4 &quot;setosa&quot; ## &quot;11&quot; 5.4 3.7 1.5 0.2 &quot;setosa&quot; ## &quot;15&quot; 5.8 4 1.2 0.2 &quot;setosa&quot; ## &quot;16&quot; 5.7 4.4 1.5 0.4 &quot;setosa&quot; ## &quot;17&quot; 5.4 3.9 1.3 0.4 &quot;setosa&quot; ## &quot;18&quot; 5.1 3.5 1.4 0.3 &quot;setosa&quot; ## &quot;19&quot; 5.7 3.8 1.7 0.3 &quot;setosa&quot; ## &quot;20&quot; 5.1 3.8 1.5 0.3 &quot;setosa&quot; ## &quot;21&quot; 5.4 3.4 1.7 0.2 &quot;setosa&quot; Exercise 2.1 The iris dataset is also saved in .csv format at ~/Dropbox/Data17/iris/iris.csv. Use AWK and tail to select the last 5 observations where Sepal.Width is larger than 3.5 and Petal.Length is smaller than 1.5. 2.2 Makefiles make is a tool that helps put all the (interdependent) pieces of an analytic workflow together: data retrieving data cleaning analysis graphs reports … 2.2.1 Simulate data in R set.seed(123) File simulate_data.R # set.seed(123) N &lt;- 1000 # sample size X1 &lt;- rpois(n = N, lambda = 50) X2 &lt;- 10 + rbinom(n = N, prob = 0.8, size = 1) Y &lt;- 10 + 3 * X1 + -5 * X2 + 3 * rnorm(n = N) write.csv(data.frame(Y = Y, X1 = X1, X2 = X2), &quot;sample_data.csv&quot;, row.names = FALSE) head(data.frame(Y = Y, X1 = X1, X2 = X2)) ## Y X1 X2 ## 1 88.74430 46 11 ## 2 125.77081 58 11 ## 3 70.76396 38 10 ## 4 110.32157 50 10 ## 5 145.79546 62 11 ## 6 109.45403 53 11 2.2.2 Create a plot in Python File create_graph.py import pandas as pd import matplotlib.pyplot as plt sim_data = pd.read_csv(&quot;sample_data.csv&quot;) plt.figure() sim_data.plot() plt.savefig(&quot;plot.pdf&quot;, format = &quot;pdf&quot;) 2.2.3 Run statistical model in R We can estimate the model with R: sim_data &lt;- read.csv(&quot;sample_data.csv&quot;) summary(lm(Y ~ X1 + X2, data = sim_data)) ## ## Call: ## lm(formula = Y ~ X1 + X2, data = sim_data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -8.3988 -1.9452 -0.0261 2.0216 9.1066 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 9.09087 2.54667 3.57 0.000374 *** ## X1 3.00531 0.01326 226.68 &lt; 2e-16 *** ## X2 -4.94658 0.22876 -21.62 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 2.936 on 997 degrees of freedom ## Multiple R-squared: 0.9811, Adjusted R-squared: 0.981 ## F-statistic: 2.585e+04 on 2 and 997 DF, p-value: &lt; 2.2e-16 2.2.4 Run statistical model in R To save the output, we use the sink function. File estimate_model.R sink(&quot;estimation_summary.txt&quot;) summary(lm(Y ~ X1 + X2, data = sim_data)) sink() 2.2.5 Makefile syntax make is a command that runs on a text file often named Makefile. A Makefile contains one or several blocks with the following structure: targetfile: sourcefile(s) [tab] command 2.2.6 Naive version File: Makefile sample_data.csv: simulate_data.R R CMD BATCH simulate_data.R plot.pdf: create_graph.py python create_graph.py estimation_summary.txt: estimate_model.R R CMD BATCH estimate_model.R A simple call to make only builds the first target (sample_data.csv). To build the other targets, we have to use: make plot.pdf and make estimation_summary.txt. 2.2.7 Making all targets File: Makefile all: analysis analysis: sample_data.csv plot.pdf estimation_summary.txt sample_data.csv: simulate_data.R R CMD BATCH simulate_data.R plot.pdf: create_graph.py python create_graph.py estimation_summary.txt: estimate_model.R R CMD BATCH estimate_model.R New data is simulated and saved in sample_data.csv. But plot.pdf and estimation_summary.txt are not updated. 2.2.8 Dealing with dependencies Problem plot.pdf and estimation_summary.txt depend on sample_data.csv. Solution: explicit dependencies. File: Makefile all: analysis analysis: sample_data.csv plot.pdf estimation_summary.txt sample_data.csv: simulate_data.R R CMD BATCH simulate_data.R plot.pdf: sample_data.csv create_graph.py python create_graph.py estimation_summary.txt: sample_data.csv estimate_model.R R CMD BATCH estimate_model.R 2.3 Git and GitHub Guest lecture by Ista Zahn. References "],
["packages.html", "Chapter 3 Packages 3.1 Why? 3.2 Package structure 3.3 Building steps 3.4 Create an R package 3.5 R packages on GitHub 3.6 RStudio projects 3.7 Package workflow example 3.8 Unit testing 3.9 Continuous integration 3.10 Code coverage 3.11 Back to GitHub 3.12 Vignettes", " Chapter 3 Packages We strongly recommand Wickham (2015). We assume the following packages are installed: install.packages(c(&quot;devtools&quot;, &quot;roxygen2&quot;, &quot;testthat&quot;, &quot;knitr&quot;)) 3.1 Why? Organize your code Distribute your code Keep versions of your code 3.2 Package structure Folder hierarchy NAMESPACE: package import / export DESCRIPTION: metadata R/: R code man/: object documentation (with short examples) tests/ data/ src/: compiled code vignettes/: manual-like documentation inst/: installed files demo/: longer examples exec, po, tools 3.3 Building steps R CMD build R CMD INSTALL R CMD check 3.3.1 R CMD build R CMD build --help Build R packages from package sources in the directories specified by ‘pkgdirs’ 3.3.2 R CMD INSTALL R CMD INSTALL --help Install the add-on packages specified by pkgs. The elements of pkgs can be relative or absolute paths to directories with the package sources, or to gzipped package ‘tar’ archives. The library tree to install to can be specified via ‘–library’. By default, packages are installed in the library tree rooted at the first directory in .libPaths() for an R session run in the current environment. 3.3.3 R CMD check R CMD check --help http://r-pkgs.had.co.nz/check.html Check R packages from package sources, which can be directories or package ‘tar’ archives with extension ‘.tar.gz’, ‘.tar.bz2’, ‘.tar.xz’ or ‘.tgz’. A variety of diagnostic checks on directory structure, index and control files are performed. The package is installed into the log directory and production of the package PDF manual is tested. All examples and tests provided by the package are tested to see if they run successfully. By default code in the vignettes is tested, as is re-building the vignette PDFs. 3.3.4 Building steps with devtools devtools::build devtools::install devtools::check and many others: load_all, document, test, run_examples, … 3.4 Create an R package 3.4.1 utils::package.skeleton package.skeleton() # &quot;in &quot;clean&quot; session (&quot;anRpackage&quot;) package.skeleton(&quot;pkgname&quot;) # in &quot;clean&quot; session set.seed(02138) f &lt;- function(x, y) x+y g &lt;- function(x, y) x-y d &lt;- data.frame(a = 1, b = 2) e &lt;- rnorm(1000) package.skeleton(list = c(&quot;f&quot;,&quot;g&quot;,&quot;d&quot;,&quot;e&quot;), name = &quot;pkgname&quot;) 3.4.2 devtools::create devtools::create(&quot;path/to/package/pkgname&quot;) Also from RStudio (`File -&gt; New Project’). 3.4.3 Submit to CRAN Figure 3.1: Submitting to CRAN. It’s not that bad… Reading: http://r-pkgs.had.co.nz/release.html 3.5 R packages on GitHub Reading: http://r-pkgs.had.co.nz/git.html Version control Website, wiki, project management Easy install: install_github from devtools Collaboration Issue tracking 3.5.0.1 RStudio and GitHub integration Figure 3.2: Create a new Linreg repository on GitHub Figure 3.3: Create a new project in RStudio Figure 3.4: Select R package Figure 3.5: Create the Linreg R package as a Git repository Figure 3.6: Automatically created files Figure 3.7: Build tab in RStudio Figure 3.8: Github webpage Figure 3.9: Open a terminal Command line # git init # already run when creating package with RStudio git add * git commit -m &quot;First commit&quot; git remote add origin https://github.com/cchoirat/Linreg git push -u origin master Figure 3.10: Github webpage is updated 3.5.1 .gitignore RStudio default .Rproj.user .Rhistory .RData GitHub default # History files .Rhistory .Rapp.history # Example code in package build process *-Ex.R # RStudio files .Rproj.user/ # produced vignettes vignettes/*.html vignettes/*.pdf 3.6 RStudio projects .Rproj file extension, in our example Linreg.Rproj A project has its own: R session .Rprofile (e.g., to customize startup environment) .Rhistory Default working directory is project directory Keeps track of project-specific recent files 3.6.1 Project options Version: 1.0 RestoreWorkspace: Default SaveWorkspace: Default AlwaysSaveHistory: Default EnableCodeIndexing: Yes UseSpacesForTab: Yes NumSpacesForTab: 2 Encoding: UTF-8 RnwWeave: knitr LaTeX: pdfLaTeX AutoAppendNewline: Yes StripTrailingWhitespace: Yes BuildType: Package PackageUseDevtools: Yes PackageInstallArgs: --no-multiarch --with-keep.source 3.6.2 Package documentation Functions and methods Vignettes PDF knitr 3.7 Package workflow example Creating R Packages: A Tutorial (Friedrich Leisch, 2009) Our example is adapted from https://cran.r-project.org/doc/contrib/Leisch-CreatingPackages.pdf. 3.7.1 Add linreg.R to R/ directory linmodEst &lt;- function(x, y) { ## CC: crossprod or a QR decomposition (as in the original version) are more efficient coef &lt;- solve(t(x) %*% x) %*% t(x) %*% y print(coef) ## degrees of freedom and standard deviation of residuals df &lt;- nrow(x) - ncol(x) sigma2 &lt;- sum((y - x %*% coef) ^ 2) / df ## compute sigma^2 * (x’x)^-1 vcov &lt;- sigma2 * solve(t(x) %*% x) colnames(vcov) &lt;- rownames(vcov) &lt;- colnames(x) list( coefficients = coef, vcov = vcov, sigma = sqrt(sigma2), df = df ) } 3.7.2 Run our function data(cats, package = &quot;MASS&quot;) linmodEst(cbind(1, cats$Bwt), cats$Hwt) ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## $coefficients ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## ## $vcov ## [,1] [,2] ## [1,] 0.4792475 -0.17058197 ## [2,] -0.1705820 0.06263081 ## ## $sigma ## [1] 1.452373 ## ## $df ## [1] 142 We can compare the output with lm. lm1 &lt;- lm(Hwt ~ Bwt, data = cats) lm1 ## ## Call: ## lm(formula = Hwt ~ Bwt, data = cats) ## ## Coefficients: ## (Intercept) Bwt ## -0.3567 4.0341 coef(lm1) ## (Intercept) Bwt ## -0.3566624 4.0340627 vcov(lm1) ## (Intercept) Bwt ## (Intercept) 0.4792475 -0.17058197 ## Bwt -0.1705820 0.06263081 summary(lm1)$sigma ## [1] 1.452373 3.7.3 Add ROxygen2 documentation Reading: http://kbroman.org/pkg_primer/pages/docs.html #&#39; Linear regression #&#39; #&#39; Runs an OLS regression not unlike \\code{\\link{lm}} #&#39; #&#39; @param y response vector (1 x n) #&#39; @param X covariate matrix (p x n) with no intercept #&#39; #&#39; @return A list with 4 elements: coefficients, vcov, sigma, df #&#39; #&#39; @examples #&#39; data(mtcars) #&#39; X &lt;- as.matrix(mtcars[, c(&quot;cyl&quot;, &quot;disp&quot;, &quot;hp&quot;)]) #&#39; y &lt;- mtcars[, &quot;mpg&quot;] #&#39; linreg(y, X) #&#39; #&#39; @export #&#39; linmodEst &lt;- function(x, y) { ## CC: crossprod or a QR decomposition (as in the original version) are more efficient coef &lt;- solve(t(x) %*% x) %*% t(x) %*% y print(coef) ## degrees of freedom and standard deviation of residuals df &lt;- nrow(x) - ncol(x) sigma2 &lt;- sum((y - x %*% coef) ^ 2) / df ## compute sigma^2 * (x’x)^-1 vcov &lt;- sigma2 * solve(t(x) %*% x) colnames(vcov) &lt;- rownames(vcov) &lt;- colnames(x) list( coefficients = coef, vcov = vcov, sigma = sqrt(sigma2), df = df ) } 3.7.4 Configure Build Tools Figure 3.11: Roxygen options 3.7.5 man page File `man/linmodEst.Rd contains: % Generated by roxygen2: do not edit by hand % Please edit documentation in R/linreg.R \\name{linmodEst} \\alias{linmodEst} \\title{Linear regression} \\usage{ linmodEst(x, y) } \\arguments{ \\item{y}{response vector (1 x n)} \\item{X}{covariate matrix (p x n) with no intercept} } \\value{ A list with 4 elements: coefficients, vcov, sigma, df } \\description{ Runs an OLS regression not unlike \\code{\\link{lm}} } \\examples{ data(mtcars) X &lt;- as.matrix(mtcars[, c(&quot;cyl&quot;, &quot;disp&quot;, &quot;hp&quot;)]) y &lt;- mtcars[, &quot;mpg&quot;] linreg(y, X) } 3.7.6 Formatted output 3.7.7 DESCRIPTION Reading: http://r-pkgs.had.co.nz/description.html Package: Linreg Type: Package Title: What the Package Does (Title Case) Version: 0.1.0 Author: Who wrote it Maintainer: The package maintainer &lt;yourself@somewhere.net&gt; Description: More about what it does (maybe more than one line) Use four spaces when indenting paragraphs within the Description. License: What license is it under? Encoding: UTF-8 LazyData: true RoxygenNote: 6.0.1 3.7.8 NAMESPACE Reading: http://r-pkgs.had.co.nz/namespace.html, in particular Imports vs Suggests export’s automatically generated when parsing ROxygen2 snippets export(linmodEst) A scary hack A scary tree 3.7.9 S3 basics Reading: http://adv-r.had.co.nz/S3.html hello &lt;- function() { s &lt;- &quot;Hello World!&quot; class(s) &lt;- &quot;hi&quot; return(s) } hello() ## [1] &quot;Hello World!&quot; ## attr(,&quot;class&quot;) ## [1] &quot;hi&quot; print.hi &lt;- function(...) { print(&quot;Surprise!&quot;) } hello() ## [1] &quot;Surprise!&quot; 3.7.10 S3 and S4 generics Reading: http://adv-r.had.co.nz/S4.html linmod &lt;- function(x, ...) UseMethod(&quot;linmod&quot;) linmod.default &lt;- function(x, y, ...) { x &lt;- as.matrix(x) y &lt;- as.numeric(y) est &lt;- linmodEst(x, y) est$fitted.values &lt;- as.vector(x %*% est$coefficients) est$residuals &lt;- y - est$fitted.values est$call &lt;- match.call() class(est) &lt;- &quot;linmod&quot; return(est) } 3.7.11 print print.linmod &lt;- function(x, ...) { cat(&quot;Call:\\n&quot;) print(x$call) cat(&quot;\\nCoefficients:\\n&quot;) print(x$coefficients) } x &lt;- cbind(Const = 1, Bwt = cats$Bwt) y &lt;- cats$Hw mod1 &lt;- linmod(x, y) ## [,1] ## Const -0.3566624 ## Bwt 4.0340627 mod1 ## Call: ## linmod.default(x = x, y = y) ## ## Coefficients: ## [,1] ## Const -0.3566624 ## Bwt 4.0340627 3.7.12 Other methods summary.linmod print.summary.linmod predict.linmod plot.linmod coef.linmod, vcov.linmod, … 3.7.13 Formulas and model frames linmod.formula &lt;- function(formula, data = list(), ...) { mf &lt;- model.frame(formula = formula, data = data) x &lt;- model.matrix(attr(mf, &quot;terms&quot;), data = mf) y &lt;- model.response(mf) est &lt;- linmod.default(x, y, ...) est$call &lt;- match.call() est$formula &lt;- formula return(est) } linmod(Hwt ~ - 1 + Bwt * Sex, data = cats) Call: linmod.formula(formula = Hwt ~ -1 + Bwt * Sex, data = cats) Coefficients: Bwt SexF SexM Bwt:SexM 2.636414 2.981312 -1.184088 1.676265 3.8 Unit testing 3.8.1 Unit tests and testthat Reading: http://r-pkgs.had.co.nz/tests.html In package directory: devtools::use_testthat() pre-populates test/testthat/ Test files should start with test to be processed. 3.8.2 test_coef.R data(cats, package = &quot;MASS&quot;) l1 &lt;- linmod(Hwt ~ Bwt * Sex, data = cats) l2 &lt;- lm(Hwt ~ Bwt * Sex, data = cats) test_that(&quot;same estimated coefficients as lm function&quot;, { expect_equal(round(l1$coefficients, 3), round(l2$coefficients, 3)) }) &gt; devtools::test() Loading Linreg Loading required package: testthat Testing Linreg . DONE ========================================================================================= 3.9 Continuous integration Reading: http://r-pkgs.had.co.nz/check.html#travis Website: https://travis-ci.org/ First step is to create a Travis account and link it to you GitHub account. Travis will list all your public GitHub repositories for you to select the ones you want to test. Calling devtools::use_coverage(pkg = &quot;.&quot;, type = c(&quot;codecov&quot;)) creates the .travis.yml file: # R for travis: see documentation at https://docs.travis-ci.com/user/languages/r language: R sudo: false cache: packages and pushing Linreg code to GitHub will automatically triggers a Travis build… which fails! To be continued… 3.10 Code coverage Reading: https://walczak.org/2017/06/how-to-add-code-coverage-codecov-to-your-r-package/ Website: https://codecov.io/ Like Travis, codecov has to be linked to a GitHub account: devtools::use_coverage(pkg = &quot;.&quot;, type = c(&quot;codecov&quot;)) creates the codecov.yml file: comment: false A call to covr::codecov(token = &quot;YOUR_TOKEN&quot;) will give you code coverage information: 3.11 Back to GitHub Badges can be added to README.md: &lt;!--- Badges -----&gt; [![Travis (LINUX) Build Status](https://travis-ci.org/cchoirat/Linreg.svg?branch=master)](https://travis-ci.org/cchoirat/Linreg) [![codecov](https://codecov.io/gh/cchoirat/Linreg/branch/master/graph/badge.svg)](https://codecov.io/gh/cchoirat/Linreg) ## `Linreg` package template Based on &quot;Creating R Packages: A Tutorial&quot; (Friedrich Leisch, 2009) - https://cran.r-project.org/doc/contrib/Leisch-CreatingPackages.pdf are are automatically displayed on GitHub: 3.12 Vignettes Reading: http://r-pkgs.had.co.nz/vignettes.html Reading: http://kbroman.org/pkg_primer/pages/vignettes.html Even if all the functions and datasets of your package are documented, it is still useful to have a more detailed illustation on how to use your package. A vignette is the right place to explain a worflow and a statistical method. Running: devtools::use_vignette(&quot;my-linear-regression&quot;) creates a vignettes folder and provide a template in RMarkdown format my-linear-regression.Rmd: https://github.com/cchoirat/Linreg/blob/master/vignettes/my-linear-regression.Rmd It also indicates in DESCRIPTION that vignettes should be built with knitr. VignetteBuilder: knitr The vignette is built into a HTML document with devtools::build_vignettes() Building Linreg vignettes Moving my-linear-regression.html, my-linear-regression.R to inst/doc/ Copying my-linear-regression.Rmd to inst/doc/ The vignette is accessible with vignette(&quot;my-linear-regression&quot;) vignette(&quot;my-linear-regression&quot;, package = &quot;Linreg&quot;) References "],
["optimization.html", "Chapter 4 Optimization 4.1 Measuring performance 4.2 Improving performance 4.3 Vectorization 4.4 Parallelization 4.5 Introduction to C++ 4.6 Rcpp packages", " Chapter 4 Optimization In this Chapter, we will see how to measure and improve code performance. 4.1 Measuring performance 4.1.1 Benchmarking Reading: http://adv-r.had.co.nz/Performance.html#microbenchmarking There are several ways to benchmark code (see http://www.alexejgossmann.com/benchmarking_r/) from system.time to dedicated packages such as rbenchmark (Kusnierczyk (2012)) or microbenchmark (Mersmann (2015)). Let’s start with an example from Wickham (2014). library(microbenchmark) m &lt;- microbenchmark( times = 1000, # default is 100 &quot;[32, 11]&quot; = mtcars[32, 11], &quot;$carb[32]&quot; = mtcars$carb[32], &quot;[[c(11, 32)]]&quot; = mtcars[[c(11, 32)]], &quot;[[11]][32]&quot; = mtcars[[11]][32], &quot;.subset2&quot; = .subset2(mtcars, 11)[32] ) m ## Unit: nanoseconds ## expr min lq mean median uq max neval ## [32, 11] 8213 9277.5 10971.448 9868.5 10922.0 83231 1000 ## $carb[32] 4418 5563.0 6663.742 6020.0 6796.0 51094 1000 ## [[c(11, 32)]] 3573 4456.5 5393.429 4888.0 5551.0 36356 1000 ## [[11]][32] 3365 4245.0 29955.512 4649.0 5300.5 24913052 1000 ## .subset2 207 263.0 411.486 303.0 368.0 31944 1000 ggplot2::autoplot(m) 4.1.2 Profiling and optimization Reading: http://adv-r.had.co.nz/Profiling.html#measure-perf Let’s compare three ways of estimating a linear regression: with built-in lm and with two functions we defined in package Linreg in Chapter 3. data(cats, package = &quot;MASS&quot;) fit1 &lt;- lm(Hwt ~ Bwt, data = cats) fit2 &lt;- linmod(Hwt ~ Bwt, data = cats) ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 fit3 &lt;- linmodEst(cbind(1, cats$Bwt), cats$Hwt) ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 all.equal(round(coef(fit1), 5), round(coef(fit2), 5)) ## [1] &quot;names for target but not for current&quot; ## [2] &quot;Attributes: &lt; names for current but not for target &gt;&quot; ## [3] &quot;Attributes: &lt; Length mismatch: comparison on first 0 components &gt;&quot; ## [4] &quot;target is numeric, current is matrix&quot; all.equal(round(coef(fit1), 5), round(fit3$coefficients, 5), check.names = FALSE) ## [1] &quot;Attributes: &lt; names for current but not for target &gt;&quot; ## [2] &quot;Attributes: &lt; Length mismatch: comparison on first 0 components &gt;&quot; ## [3] &quot;target is numeric, current is matrix&quot; m &lt;- microbenchmark( fit1 &lt;- lm(Hwt ~ Bwt, data = cats), fit2 &lt;- linmod(Hwt ~ Bwt, data = cats), fit3 &lt;- linmodEst(cbind(1, cats$Bwt), cats$Hwt) # custom checks can be performed with the &#39;check&#39; argument ) ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## [1,] -0.3566624 ## [2,] 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 ## [,1] ## (Intercept) -0.3566624 ## Bwt 4.0340627 m ## Unit: microseconds ## expr min lq ## fit1 &lt;- lm(Hwt ~ Bwt, data = cats) 652.639 690.1945 ## fit2 &lt;- linmod(Hwt ~ Bwt, data = cats) 570.266 584.7155 ## fit3 &lt;- linmodEst(cbind(1, cats$Bwt), cats$Hwt) 98.742 114.3290 ## mean median uq max neval ## 1019.5402 760.3745 977.3220 9715.855 100 ## 693.6297 608.3040 698.4720 2658.181 100 ## 143.9893 129.2390 152.6115 621.942 100 ggplot2::autoplot(m) 4.2 Improving performance Vectorize Parallelize Use a faster language (C/C++, Fortran, …) Use different tools (as in Chapter 6) 4.3 Vectorization Let’s take an example from a blog post (that seems to be gone). It’s used in Wickham (2014, Section Case studies). vacc1a &lt;- function(age, female, ily) { p &lt;- 0.25 + 0.3 * 1 / (1 - exp(0.04 * age)) + 0.1 * ily p &lt;- p * if (female) 1.25 else 0.75 p &lt;- max(0, p) p &lt;- min(1, p) p } set.seed(1959) n &lt;- 1000 age &lt;- rnorm(n, mean = 50, sd = 10) female &lt;- sample(c(T, F), n, rep = TRUE) ily &lt;- sample(c(T, F), n, prob = c(0.8, 0.2), rep = TRUE) vacc1a(age[1], female[1], ily[1]) ## [1] 0.1667005 vacc1a(age[2], female[2], ily[2]) ## [1] 0.4045439 vacc1a(age[3], female[3], ily[3]) ## [1] 0.2699324 vacc1a is not designed for vector inputs vacc1a(age, female, ily) ## Warning in if (female) 1.25 else 0.75: the condition has length &gt; 1 and ## only the first element will be used ## [1] 0.2526293 It should be called vacc1a(age[1], female[1], ily[1]) ## [1] 0.1667005 vacc1a(age[2], female[2], ily[2]) ## [1] 0.4045439 vacc1a(age[3], female[3], ily[3]) ## [1] 0.2699324 We can use a loop: out &lt;- numeric(n) for (i in 1:n) out[i] &lt;- vacc1a(age[i], female[i], ily[i]) or one of the apply functions: vacc0&lt;- function(age, female, ily) { sapply(1:n, function(i) vacc1a(age[i], female[i], ily[i])) } out0 &lt;- vacc0(age, female, ily) all.equal(out, out0) ## [1] TRUE But, it’s convenient for the function to support vector inputs, instead of relying on users writing their own wrappers. We can loop inside the function body. vacc1 &lt;- function(age, female, ily) { n &lt;- length(age) out &lt;- numeric(n) for (i in seq_len(n)) { out[i] &lt;- vacc1a(age[i], female[i], ily[i]) } out } or we can rely on base R functions that accept vector inputs vacc2 &lt;- function(age, female, ily) { p &lt;- 0.25 + 0.3 * 1 / (1 - exp(0.04 * age)) + 0.1 * ily p &lt;- p * ifelse(female, 1.25, 0.75) p &lt;- pmax(0, p) p &lt;- pmin(1, p) p } 4.4 Parallelization library(parallel) cores &lt;- detectCores() cores ## [1] 4 vacc3 &lt;- function(age, female, ily) { mcmapply(function(i) vacc1a(age[i], female[i], ily[i]), 1:n, mc.cores = cores - 1) } out3 &lt;- vacc3(age, female, ily) library(microbenchmark) m &lt;- microbenchmark( vacc0 = vacc0(age, female, ily), vacc1 = vacc1(age, female, ily), vacc2 = vacc2(age, female, ily), vacc3 = vacc3(age, female, ily) ) m ## Unit: microseconds ## expr min lq mean median uq max ## vacc0 2263.678 3127.7710 3971.2182 3565.5330 4315.5525 13190.999 ## vacc1 2029.497 2400.6820 3302.9356 2727.1575 3635.5765 9703.088 ## vacc2 114.941 159.2735 497.3207 213.4165 369.0215 6296.139 ## vacc3 12711.030 15649.8570 19450.3278 17278.0340 20498.2100 60893.732 ## neval ## 100 ## 100 ## 100 ## 100 ggplot2::autoplot(m) So, what’s going on? We will talk more about parallelization tools and techniques in Chapter `(???)(bigdata). 4.5 Introduction to C++ C++ is a very powerful object-oriented language. Many tutorials are available on-line, for example http://www.cplusplus.com/doc/tutorial/. R is intepreted, C++ is compiled and typically much faster (in loops for examples). Our introduction to C++ is from an R perspective. Python (and most interpreted languages) can be extended with C++ too. 4.5.1 Rcpp Reading: http://adv-r.had.co.nz/Rcpp.html Rcpp Eddelbuettel (2013) makes it very easy to use C++ code in R (for example to speed up a function or to wrap methods already implemented in C++). Rcpp provides “syntactic sugar” that makes is easy to leverage C++ even without a deep knowledge of it. To use Rcpp, you need a C++ compiler: Windows: Rtools OS X: Xcode Linux: r-base-dev from package manager 4.5.2 Hello World! library(Rcpp) cppFunction(&#39;void hello(){ Rprintf(&quot;Hello, world!&quot;); }&#39;) hello ## function () ## invisible(.Primitive(&quot;.Call&quot;)(&lt;pointer: 0x10929fcc0&gt;)) hello() ## Hello, world! Rprintf is the counterpart of C++ printf function. Let’s take the first example of Wickham (2014), Section Getting started with C++. cppFunction(&#39;int add(int x, int y, int z) { int sum = x + y + z; return sum; }&#39;) We have to specify the input type and the output type. As expected add(1, 2, 3) returns 6. How about? add(1.1, 2.2, 3.3) cppFunction(&#39;double addd(double x, double y, double z) { double sum = x + y + z; return sum; }&#39;) With addd we do get 6.6: addd(1.1, 2.2, 3.3) 4.5.3 sourceCpp When C++ code takes more than a couple of lines, it’s more convenient to create a stand-alone C++ source file. From the RStudio default template: #include &lt;Rcpp.h&gt; using namespace Rcpp; NumericVector timesTwo(NumericVector x) { return x * 2; } /*** R timesTwo(42) */ From R, we can use sourceCpp to access timesTwo in R: sourceCpp(&quot;src/times-two.cpp&quot;) timesTwo(100) 4.5.4 Data types int double bool string NumericVector LogicalVector IntegerVector CharacterVector NumericMatrix IntegerMatrix LogicalMatrix CharacterMatrix NA_REAL NA_INTEGER NA_STRING NA_LOGICAL List DataFrame Function … 4.5.5 Sugar Reading: http://adv-r.had.co.nz/Rcpp.html#rcpp-sugar. Vectorization of +, *, -, /, pow, &lt;, &lt;=, &gt;, &gt;=, ==, !=, ! -x` Exercise 4.1 Can you write an Rcpp function similar to addd but accepting vector arguments? cppFunction(&#39;NumericVector addv(NumericVector x, NumericVector y, NumericVector z) { NumericVector sum = x + y + z; return sum; }&#39;) 4.5.6 Example (continued) #include &lt;Rcpp.h&gt; using namespace Rcpp; double vacc3a(double age, bool female, bool ily){ double p = 0.25 + 0.3 * 1 / (1 - exp(0.04 * age)) + 0.1 * ily; p = p * (female ? 1.25 : 0.75); p = std::max(p, 0.0); p = std::min(p, 1.0); return p; } // [[Rcpp::export]] NumericVector vacc3(NumericVector age, LogicalVector female, LogicalVector ily) { int n = age.size(); NumericVector out(n); for(int i = 0; i &lt; n; ++i) { out[i] = vacc3a(age[i], female[i], ily[i]); } return out; } 4.5.7 Back to Linreg armadillo is a very powerful C++ linear algebra library: http://arma.sourceforge.net/ It can be used in Rcpp via the RcppArmadillo package. Exercise 4.2 Can you write an Rcpp function similar to linmodEst? linmodEst &lt;- function(x, y) { ## CC: crossprod or a QR decomposition (as in the original version) are more efficient coef &lt;- solve(t(x) %*% x) %*% t(x) %*% y print(coef) ## degrees of freedom and standard deviation of residuals df &lt;- nrow(x) - ncol(x) sigma2 &lt;- sum((y - x %*% coef) ^ 2) / df ## compute sigma^2 * (x’x)^-1 vcov &lt;- sigma2 * solve(t(x) %*% x) colnames(vcov) &lt;- rownames(vcov) &lt;- colnames(x) list( coefficients = coef, vcov = vcov, sigma = sqrt(sigma2), df = df ) } 4.6 Rcpp packages Readings: - https://cran.r-project.org/web/packages/Rcpp/vignettes/Rcpp-package.pdf - http://adv-r.had.co.nz/Rcpp.html#rcpp-package References "],
["databases.html", "Chapter 5 Databases 5.1 Overview 5.2 SQL 5.3 noSQL 5.4 R interfaces", " Chapter 5 Databases 5.1 Overview 5.2 SQL 5.3 noSQL 5.4 R interfaces "],
["bigdata.html", "Chapter 6 Big data 6.1 List of tools 6.2 Data that fits in memory 6.3 Data that doesn’t fit in memory (but fits on drive) 6.4 Pure R solutions 6.5 Scaling up", " Chapter 6 Big data 6.1 List of tools Reading: Varian (2014) (PDF available) Spark? h2o? More? Let’s go back to the bottlenecks CPU RAM I/O 6.2 Data that fits in memory 6.2.1 Faster I/O Reading: https://cran.r-project.org/web/packages/data.table/vignettes/datatable-intro.html data.table provides an enhanced of a data.frame and faster I/O with fread and fwrite. To read the 0.5GB ratings file from MovieLens library(data.table) system.time(ratings &lt;- fread(&quot;~/Dropbox/Data17/ml-20m/ratings.csv&quot;)) takes Read 20000263 rows and 4 (of 4) columns from 0.497 GB file in 00:00:05 user system elapsed 4.007 0.229 4.244 while system.time(ratings &lt;- read.csv(&quot;~/Dropbox/Data17/ml-20m/ratings.csv&quot;)) takes user system elapsed 85.199 2.711 90.997 There are ways to improve the speed of read.csv (for example, but specifying column types). But in general fread is much faster. library(readr) # in tidyverse system.time(ratings &lt;- read_csv(&quot;~/Dropbox/Data17/ml-20m/ratings.csv&quot;)) user system elapsed 10.290 3.037 18.450 also tends to perform better than read.csv. 6.2.2 Reference vs copy Table 6.1: I/O comparison package function. speed output base read.csv slow data.frame data.table fread very fast data.table readr read_csv fast tibble 6.3 Data that doesn’t fit in memory (but fits on drive) 6.4 Pure R solutions 6.4.1 Sampling 6.4.2 bigmemory 6.4.3 Database connections and lazy evaluation 6.5 Scaling up 6.5.1 Parallel computing and clusters 6.5.2 Cloud computing 6.5.3 Spark Reading: https://spark.rstudio.com/ library(sparklyr) spark_install(version = &quot;2.1.0&quot;) conf &lt;- spark_config() conf$`sparklyr.shell.driver-memory` &lt;- &quot;32G&quot; conf$spark.memory.fraction &lt;- 0.5 sc &lt;- spark_connect(master = &quot;local&quot;) library(dplyr) iris_tbl &lt;- copy_to(sc, iris) flights_tbl &lt;- copy_to(sc, nycflights13::flights, &quot;flights&quot;) batting_tbl &lt;- copy_to(sc, Lahman::Batting, &quot;batting&quot;) src_tbls(sc) top_rows &lt;- read.csv(&quot;~/Dropbox/Data17/AirFlights/allyears.csv&quot;, nrows = 5) file_columns &lt;- top_rows %&gt;% purrr::map(function(x)&quot;character&quot;) rm(top_rows) sp_flights &lt;- spark_read_csv(sc, name = &quot;flights2&quot;, path = &quot;~/Dropbox/Data17/AirFlights/allyears.csv&quot;, memory = FALSE, columns = file_columns, infer_schema = FALSE) flights_table &lt;- sp_flights %&gt;% mutate(DepDelay = as.numeric(DepDelay), ArrDelay = as.numeric(ArrDelay), SchedDeparture = as.numeric(CRSDepTime)) %&gt;% select(Origin, Dest, SchedDeparture, ArrDelay, DepDelay, Month, DayofMonth) flights_table %&gt;% head Cache data: sp_flights %&gt;% tally # takes a looooong time 123534969… subset_table &lt;- flights_table %&gt;% compute(&quot;flights_subset&quot;) subset_table %&gt;% tally # a bit faster. 123534969 as well! lm(arr_delay ~ distance, data = flights_tbl) ml_linear_regression(subset_table, response = &quot;ArrDelay&quot;, features = &quot;SchedDeparture&quot;) TODOL change the config arguments of the connection 6.5.4 h2o and Sparkling Water Reading: https://spark.rstudio.com/h2o.html 6.5.5 More? GPU References "],
["visualization.html", "Chapter 7 Visualization 7.1 Principles of visualization 7.2 Maps and GIS", " Chapter 7 Visualization 7.1 Principles of visualization 7.2 Maps and GIS "],
["references.html", "References", " References "]
]
